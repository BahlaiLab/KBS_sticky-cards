new <- read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/New_Insect%20ID%20-%20sticky%20card%20comparison%20-%20as%20of%203.22.22.csv",na.strings = NULL)
old <- read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/Old_Insect%20ID%20-%20sticky%20card%20comparison%20-%20as%20of%203.22.22.csv",na.strings = NULL)
#taxa <- read.csv("")
#combine data tables
library (plyr)
insects <- rbind.fill (new, old)
#change Rep and Station to characters
insects$Rep <- as.character(insects$Rep)
insects$Station <- as.character(insects$Station)
summary(insects)
####
#NMDS of insect community between card types
library (vegan)
#Create matrix of environmental variables
env.matrix<-insects[c(1:5)]
#create matrix of community variables
com.matrix<-insects[c(6:10)]
#ordination by NMDS
NMDS<-metaMDS(com.matrix, distance="bray", k=2, autotransform=FALSE, trymax=100)
stressplot(NMDS)
#ordination by NMDS
NMDS<-metaMDS(com.matrix, distance="bray", k=2, autotransform=FALSE, trymax=100)
View(com.matrix)
#import crosstab files
msce2020<-read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2020_LTER_MCSE_crosstab.csv")
forest2020<-read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2020_LTER_forest_crosstab.csv")
#get rid of blank lines in both sets. Because excel file.
msce2020<- na.omit(msce2020)
forest2020<- na.omit(forest2020)
library(reshape2)
msce2020.list<-melt(data=msce2020, id.vars=c("DATE","TREAT","REP","STATION"))
forest2020.list<-melt(data=forest2020, id.vars=c("DATE","TREAT","TRAP"))
names(forest2020.list)[3]<-"STATION"
#rename variable and value columns to harmonize with main database
names(msce2020.list)[5]<-"SPID"
#import crosstab files
msce2020<-read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2020_LTER_MCSE_crosstab.csv")
forest2020<-read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2020_LTER_forest_crosstab.csv")
#get rid of blank lines in both sets. Because excel file.
msce2020<- na.omit(msce2020)
forest2020<- na.omit(forest2020)
library(reshape2)
msce2020.list<-melt(data=msce2020, id.vars=c("DATE","TREAT","REP","STATION"))
forest2020.list<-melt(data=forest2020, id.vars=c("DATE","TREAT","TRAP"))
names(forest2020.list)[3]<-"STATION"
#rename variable and value columns to harmonize with main database
names(msce2020.list)[5]<-"SPID"
names(msce2020.list)[6]<-"ADULTS"
summary(msce2020.list)
names(forest2020.list)[4]<-"SPID"
names(forest2020.list)[5]<-"ADULTS"
summary(forest2020.list)
#import crosstab files
msce2020<-read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2020_LTER_MCSE_crosstab.csv")
forest2020<-read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2020_LTER_forest_crosstab.csv")
#get rid of blank lines in both sets. Because excel file.
msce2020<- na.omit(msce2020)
forest2020<- na.omit(forest2020)
library(reshape2)
msce2020.list<-melt(data=msce2020, id.vars=c("DATE","TREAT","REP","STATION"))
forest2020.list<-melt(data=forest2020, id.vars=c("DATE","TREAT","TRAP"))
names(forest2020.list)[3]<-"STATION"
#rename variable and value columns to harmonize with main database
names(msce2020.list)[5]<-"SPID"
names(msce2020.list)[6]<-"ADULTS"
summary(msce2020.list)
names(forest2020.list)[4]<-"SPID"
names(forest2020.list)[5]<-"ADULTS"
summary(forest2020.list)
#index by trapID (not optimal, but how it's done in main database. Ugh)
#import trapID index
trapindex<-read.table(file="MainSite_TrapInfo.txt", sep=",", header=TRUE)
names(trapindex)[3]<-"REP"
trapindexforest<-read.table(file="UnmanagedSites_TrapInfo.txt", sep=",", header=TRUE)
names(trapindexforest)[2]<-"TREAT"
#Treatment variable listed not by number, but by T[x]. Gotta get that crap out
trapindex$TREAT<-gsub("T","", trapindex$TREAT)
#merge that crud
indexed.msce2020.list<-merge(msce2020.list, trapindex, by=c("TREAT","REP","STATION"), all.x=TRUE)
indexed.forest2020.list<-merge(forest2020.list, trapindexforest, by=c("TREAT","STATION"), all.x=TRUE)
#strip out the variables that aren't in the main database which you really should fix to be completely usable, Christie
#ugh I hate myself for doing this
indexed.msce2020.list$TREAT<-NULL
indexed.msce2020.list$REP<-NULL
indexed.msce2020.list$STATION<-NULL
indexed.msce2020.list$PLOT<-NULL
indexed.msce2020.list$XUTM83<-NULL
indexed.msce2020.list$YUTM83<-NULL
indexed.forest2020.list$TREAT<-NULL
indexed.forest2020.list$STATION<-NULL
indexed.forest2020.list$HABITAT<-NULL
indexed.forest2020.list$TREAT_DESC<-NULL
indexed.forest2020.list$REP<-NULL
write.csv(indexed.msce2020.list, file="msce2021_cleaned.csv", row.names=FALSE)
write.csv(indexed.forest2020.list, file="forest2021_cleaned.csv", row.names=FALSE)
#import crosstab files
msce2021<-read.csv(file="2021_LTER_MCSE_crosstab.csv")
forest2021<-read.csv(file="2021_LTER_forest_crosstab.csv")
#get rid of blank lines in both sets. Because excel file.
msce2021<- na.omit(msce2021)
forest2021<- na.omit(forest2021)
library(reshape2)
msce2021.list<-melt(data=msce2021, id.vars=c("DATE","TREAT","REP","STATION"))
forest2021.list<-melt(data=forest2021, id.vars=c("DATE","TREAT","TRAP"))
names(forest2021.list)[3]<-"STATION"
#rename variable and value columns to harmonize with main database
names(msce2021.list)[5]<-"SPID"
names(msce2021.list)[6]<-"ADULTS"
summary(msce2021.list)
names(forest2021.list)[4]<-"SPID"
names(forest2021.list)[5]<-"ADULTS"
summary(forest2021.list)
#index by trapID (not optimal, but how it's done in main database. Ugh)
#import trapID index
trapindex<-read.table(file="MainSite_TrapInfo.txt", sep=",", header=TRUE)
names(trapindex)[3]<-"REP"
trapindexforest<-read.table(file="UnmanagedSites_TrapInfo.txt", sep=",", header=TRUE)
names(trapindexforest)[2]<-"TREAT"
#Treatment variable listed not by number, but by T[x]. Gotta get that crap out
trapindex$TREAT<-gsub("T","", trapindex$TREAT)
#merge that crud
indexed.msce2021.list<-merge(msce2021.list, trapindex, by=c("TREAT","REP","STATION"), all.x=TRUE)
indexed.forest2021.list<-merge(forest2021.list, trapindexforest, by=c("TREAT","STATION"), all.x=TRUE)
#strip out the variables that aren't in the main database which you really should fix to be completely usable, Christie
#ugh I hate myself for doing this
indexed.msce2021.list$TREAT<-NULL
indexed.msce2021.list$REP<-NULL
indexed.msce2021.list$STATION<-NULL
indexed.msce2021.list$PLOT<-NULL
indexed.msce2021.list$XUTM83<-NULL
indexed.msce2021.list$YUTM83<-NULL
indexed.forest2021.list$TREAT<-NULL
indexed.forest2021.list$STATION<-NULL
indexed.forest2021.list$HABITAT<-NULL
indexed.forest2021.list$TREAT_DESC<-NULL
indexed.forest2021.list$REP<-NULL
write.csv(indexed.msce2021.list, file="msce2021_cleaned.csv", row.names=FALSE)
write.csv(indexed.forest2021.list, file="forest2021_cleaned.csv", row.names=FALSE)
write.csv(indexed.msce2020.list, file="msce2020_cleaned.csv", row.names=FALSE)
write.csv(indexed.forest2020.list, file="forest2020_cleaned.csv", row.names=FALSE)
write.csv(indexed.msce2021.list, file="msce2021_cleaned.csv", row.names=FALSE)
write.csv(indexed.forest2021.list, file="forest2021_cleaned.csv", row.names=FALSE)
LTER <- read.cvs("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2021_LTER_all.csv")
LTER <- read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2021_LTER_all.csv")
install.packages("lubridate")
library (lubridate)
summary(LTER)
LTER$newdate<-mdy(LTER$DATE)
LTER$DOY<-yday(LTER$newdate)
LTER$week<-isoweek(LTER$newdate)
summary(LB)
summary(LTER)
write.csv(LTER, file="2021_LTER_all_cleaned.csv", row.names=FALSE)
LTER <- read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2021_LTER_all.csv")
summary(LTER)
library (lubridate)
LTER$DOY<-yday(LTER$newdate)
LTER$week<-isoweek(LTER$newdate)
summary(LTER)
write.csv(LTER, file="2021_LTER_all_cleaned.csv", row.names=FALSE)
Bahlai <- read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/Insect%20ID%202021_sticky%20card%20.csv")
summary(Bahlai)
Bahlai$DOY<-yday(Bahlai$newdate)
Bahlai$week<-isoweek(Bahlai$newdate)
Bahlai$newdate<-mdy(Bahlai$DATE)
Bahlai$DOY<-yday(Bahlai$newdate)
Bahlai$week<-isoweek(Bahlai$newdate)
summary(Bahlai)
write.csv(Bahlai, file="Insect ID 2021_sticky card_cleaned.csv", row.names=FALSE)
LTER <- read.csv("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2021_LTER_all.csv")
LTER$DOY<-yday(LTER$newdate)
LTER$newdate<-mdy(LTER$DATE)
LTER$DOY<-yday(LTER$newdate)
LTER$week<-isoweek(LTER$newdate)
summary(LTER)
write.csv(LTER, file="2021_LTER_all_cleaned.csv", row.names=FALSE)
#bring in data set of all KBS field data with week already attached
KBS <- read.csv ("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2021_LTER_all.csv", na.strings = NULL)
#bring in data set with all insects we IDed in the Bahlai lab
Bahlai <- read.csv ("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/Insect%20ID%202021_sticky%20card.csv", na.strings = NULL)
#bring in data set of all KBS field data with week already attached
KBS <- read.csv ("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2021_LTER_all.csv", na.strings = NULL)
View(KBS)
#bring in data set with all insects we IDed in the Bahlai lab
Bahlai <- read.csv ("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/Insect%20ID%202021_sticky%20card.csv", na.strings = NULL)
#need to perform this code for each species
#starting with ABIPN
cumABIPN<-c()
for(i in 1:length(column)){
if (KBS$is-collected=="no"){
bugcount<-ABIPN[i]
}else{
bugcount<-ABIPN[i]+ ABIPN[i-1]
}
cumABIPN<-c(cumABIPN, bugcount)
}
for(i in 1:length(KBS$ABIPN)){
if (KBS$is-collected=="no"){
bugcount<-ABIPN[i]
}else{
bugcount<-ABIPN[i]+ ABIPN[i-1]
}
cumABIPN<-c(cumABIPN, bugcount)
}
#bring in data set of all KBS field data with week already attached
KBS <- read.csv ("https://raw.githubusercontent.com/BahlaiLab/KBS_sticky-cards/main/2021_LTER_all.csv", na.strings = NULL)
View(KBS)
#need to perform this code for each species
#starting with ABIPN
cumABIPN<-c()
for(i in 1:length(KBS$ABIPN)){
if (KBS$is.collected=="no"){
bugcount<-ABIPN[i]
}else{
bugcount<-ABIPN[i]+ ABIPN[i-1]
}
cumABIPN<-c(cumABIPN, bugcount)
}
str(KBS)
for(i in 1:length(KBS$ABIPN)){
if (KBS$is.collected=="no"){
bugcount<-KBS$ABIPN[i]
}else{
bugcount<-KBS$ABIPN[i]+ KBS$ABIPN[i-1]
}
cumABIPN<-c(cumABIPN, bugcount)
}
datacombined<-cbind(data, cumABIPN)
View(datacombined)
#BURSI
cumBURSI<-c()
for(i in 1:length(KBS$BURSI)){
if (KBS$is-collected=="no"){
bugcount<-KBS$BURSI[i]
}else{
bugcount<-KBS$BURSI[i]+ KBS$BURSI[i-1]
}
cumBURSI<-c(cumBURSI, bugcount)
}
if (KBS$is.collected=="no"){
bugcount<-KBS$BURSI[i]
}else{
bugcount<-KBS$BURSI[i]+ KBS$BURSI[i-1]
}
for(i in 1:length(KBS$BURSI)){
if (KBS$is.collected=="no"){
bugcount<-KBS$BURSI[i]
}else{
bugcount<-KBS$BURSI[i]+ KBS$BURSI[i-1]
}
cumBURSI<-c(cumBURSI, bugcount)
}
datacombined<-cbind(data, cumBURSI)
View(datacombined)
#C7
cumC7<-c()
for(i in 1:length(KBS$C7)){
if (KBS$is.collected=="no"){
bugcount<-KBS$C7[i]
}else{
bugcount<-KBS$C7[i]+ KBS$C7[i-1]
}
cumC7<-c(cumC7, bugcount)
}
#CMAC
cumCMAC<-c()
for(i in 1:length(KBS$CMAC)){
if (KBS$is-collected=="no"){
bugcount<-KBS$CMAC[i]
}else{
bugcount<-KBS$CMAC[i]+ KBS$CMAC[i-1]
}
cumCMAC<-c(cumCMAC, bugcount)
}
for(i in 1:length(KBS$CMAC)){
if (KBS$is.collected=="no"){
bugcount<-KBS$CMAC[i]
}else{
bugcount<-KBS$CMAC[i]+ KBS$CMAC[i-1]
}
cumCMAC<-c(cumCMAC, bugcount)
}
#CSTIG
cumCSTIG<-c()
for(i in 1:length(KBS$CSTIG)){
if (KBS$is-collected=="no"){
bugcount<-KBS$CSTIG[i]
}else{
bugcount<-KBS$CSTIG[i]+ KBS$CSTIG[i-1]
}
cumCSTIG<-c(cumCSTIG, bugcount)
}
for(i in 1:length(KBS$CSTIG)){
if (KBS$is.collected=="no"){
bugcount<-KBS$CSTIG[i]
}else{
bugcount<-KBS$CSTIG[i]+ KBS$CSTIG[i-1]
}
cumCSTIG<-c(cumCSTIG, bugcount)
}
#CTRIF
cumCTRIF<-c()
for(i in 1:length(KBS$CTRIF)){
if (KBS$is.collected=="no"){
bugcount<-KBS$CTRIF[i]
}else{
bugcount<-KBS$CTRIF[i]+ KBS$CTRIF[i-1]
}
cumCTRIF<-c(cumCTRIF, bugcount)
}
#CYCSP
cumCYCSP<-c()
for(i in 1:length(KBS$CYCSP)){
if (KBS$is.collected=="no"){
bugcount<-KBS$CYCSP[i]
}else{
bugcount<-KBS$CYCSP[i]+ KBS$CYCSP[i-1]
}
cumCYCSP<-c(cumCYCSP, bugcount)
}
#H13
cumH13<-c()
for(i in 1:length(KBS$H13)){
if (KBS$is.collected=="no"){
bugcount<-KBS$H13[i]
}else{
bugcount<-KBS$H13[i]+ KBS$H13[i-1]
}
cumH13<-c(cumH13, bugcount)
}
summary(cumC7)
str(cumC7)
#HAXY
cumHAXY<-c()
for(i in 1:length(KBS$HAXY)){
if (KBS$is.collected=="no"){
bugcount<-KBS$HAXY[i]
}else{
bugcount<-KBS$HAXY[i]+ KBS$HAXY[i-1]
}
cumHAXY<-c(cumHAXY, bugcount)
}
#HCONV
cumHCONV<-c()
for(i in 1:length(KBS$HCONV)){
if (KBS$is.collected=="no"){
bugcount<-KBS$HCONV[i]
}else{
bugcount<-KBS$HCONV[i]+ KBS$HCONV[i-1]
}
cumHCONV<-c(cumHCONV, bugcount)
}
warnings()
#HGLAC
cumHGLAC<-c()
for(i in 1:length(KBS$HGLAC)){
if (KBS$is.collected=="no"){
bugcount<-KBS$HGLAC[i]
}else{
bugcount<-KBS$HGLAC[i]+ KBS$HGLAC[i-1]
}
cumHGLAC<-c(cumHGLAC, bugcount)
}
#HPARN
cumHPARN<-c()
for(i in 1:length(KBS$HPARN)){
if (KBS$is.collected=="no"){
bugcount<-KBS$HPARN[i]
}else{
bugcount<-KBS$HPARN[i]+ KBS$HPARN[i-1]
}
cumHPARN<-c(cumHPARN, bugcount)
}
#HVAR
cumHVAR<-c()
for(i in 1:length(KBS$HVAR)){
if (KBS$is.collected=="no"){
bugcount<-KBS$HVAR[i]
}else{
bugcount<-KBS$HVAR[i]+ KBS$HVAR[i-1]
}
cumHVAR<-c(cumHVAR, bugcount)
}
#PQUA
cumPQUA<-c()
for(i in 1:length(KBS$PQUA)){
if (KBS$is.collected=="no"){
bugcount<-KBS$PQUA[i]
}else{
bugcount<-KBS$PQUA[i]+ KBS$PQUA[i-1]
}
cumPQUA<-c(cumPQUA, bugcount)
}
#CANTHARID
cumCANTHARID<-c()
for(i in 1:length(KBS$CANTHARID)){
if (KBS$is.collected=="no"){
bugcount<-KBS$CANTHARID[i]
}else{
bugcount<-KBS$CANTHARID[i]+ KBS$CANTHARID[i-1]
}
cumCANTHARID<-c(cumCANTHARID, bugcount)
}
#ID
cumID<-c()
for(i in 1:length(KBS$ID)){
if (KBS$is.collected=="no"){
bugcount<-KBS$ID[i]
}else{
bugcount<-KBS$ID[i]+ KBS$ID[i-1]
}
cumID<-c(cumID, bugcount)
}
str(KBS)
#LAMPY
cumLAMPY<-c()
for(i in 1:length(KBS$LAMPY)){
if (KBS$is.collected=="no"){
bugcount<-KBS$LAMPY[i]
}else{
bugcount<-KBS$LAMPY[i]+ KBS$LAMPY[i-1]
}
cumLAMPY<-c(cumLAMPY, bugcount)
}
#LCW
cumLCW<-c()
for(i in 1:length(KBS$LCW)){
if (KBS$is.collected=="no"){
bugcount<-KBS$LCW[i]
}else{
bugcount<-KBS$LCW[i]+ KBS$LCW[i-1]
}
cumLCW<-c(cumLCW, bugcount)
}
#MECOP
cumMECOP<-c()
for(i in 1:length(KBS$MECOP)){
if (KBS$is.collected=="no"){
bugcount<-KBS$MECOP[i]
}else{
bugcount<-KBS$MECOP[i]+ KBS$MECOP[i-1]
}
cumMECOP<-c(cumMECOP, bugcount)
}
#X20SPOT
cumX20SPOT<-c()
for(i in 1:length(KBS$X20SPOT)){
if (KBS$is.collected=="no"){
bugcount<-KBS$X20SPOT[i]
}else{
bugcount<-KBS$X20SPOT[i]+ KBS$X20SPOT[i-1]
}
cumX20SPOT<-c(cumX20SPOT, bugcount)
}
#OTHER
cumOTHER<-c()
for(i in 1:length(KBS$OTHER)){
if (KBS$is.collected=="no"){
bugcount<-KBS$OTHER[i]
}else{
bugcount<-KBS$OTHER[i]+ KBS$OTHER[i-1]
}
cumOTHER<-c(cumOTHER, bugcount)
}
